{"version":3,"file":"glob.js","sourceRoot":"","sources":["../../../../../../packages/service-worker/config/src/glob.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,qBAAM,WAAW,GAAG,SAAS,CAAC;AAC9B,qBAAM,SAAS,GAAG,YAAY,CAAC;AAE/B,qBAAM,SAAS,GAAG;IAChB,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAC;IAC7B,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAC;IAC7B,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAC;IAC7B,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAC;CACpC,CAAC;;;;;AAEF,MAAM,sBAAsB,IAAY;IACtC,qBAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;IAC3C,qBAAI,KAAK,GAAW,EAAE,CAAC;IACvB,OAAO,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC3B,qBAAM,OAAO,sBAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC;QACjC,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxB,KAAK,IAAI,SAAS,CAAC;aACpB;YAAC,IAAI,CAAC,CAAC;gBACN,KAAK,IAAI,IAAI,CAAC;aACf;SACF;QAAC,IAAI,CAAC,CAAC;YACN,qBAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAC9B,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,EAA5C,CAA4C,EAAE,OAAO,CAAC,CAAC;YAChF,KAAK,IAAI,SAAS,CAAC;YACnB,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxB,KAAK,IAAI,KAAK,CAAC;aAChB;SACF;KACF;IACD,MAAM,CAAC,KAAK,CAAC;CACd","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst WILD_SINGLE = '[^\\\\/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\n\nconst TO_ESCAPE = [\n  {replace: /\\./g, with: '\\\\.'},\n  {replace: /\\?/g, with: '\\\\?'},\n  {replace: /\\+/g, with: '\\\\+'},\n  {replace: /\\*/g, with: WILD_SINGLE},\n];\n\nexport function globToRegex(glob: string): string {\n  const segments = glob.split('/').reverse();\n  let regex: string = '';\n  while (segments.length > 0) {\n    const segment = segments.pop() !;\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = TO_ESCAPE.reduce(\n          (segment, escape) => segment.replace(escape.replace, escape.with), segment);\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n"]}